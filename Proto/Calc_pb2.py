# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Calc.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='Calc.proto',
  package='calc',
  syntax='proto3',
  serialized_pb=_b('\n\nCalc.proto\x12\x04\x63\x61lc\"$\n\nAddRequest\x12\n\n\x02n1\x18\x01 \x01(\x05\x12\n\n\x02n2\x18\x02 \x01(\x05\"\x16\n\x08\x41\x64\x64Reply\x12\n\n\x02n1\x18\x01 \x01(\x05\"*\n\x10SubstractRequest\x12\n\n\x02n1\x18\x01 \x01(\x05\x12\n\n\x02n2\x18\x02 \x01(\x05\"\x1c\n\x0eSubstractReply\x12\n\n\x02n1\x18\x01 \x01(\x05\")\n\x0fMultiplyRequest\x12\n\n\x02n1\x18\x01 \x01(\x05\x12\n\n\x02n2\x18\x02 \x01(\x05\"\x1b\n\rMultiplyReply\x12\n\n\x02n1\x18\x01 \x01(\x05\"\'\n\rDivideRequest\x12\n\n\x02n1\x18\x01 \x01(\x05\x12\n\n\x02n2\x18\x02 \x01(\x05\"\x19\n\x0b\x44ivideReply\x12\n\n\x02\x66\x31\x18\x01 \x01(\x02\x32\xe2\x01\n\nCalculator\x12)\n\x03\x41\x64\x64\x12\x10.calc.AddRequest\x1a\x0e.calc.AddReply\"\x00\x12;\n\tSubstract\x12\x16.calc.SubstractRequest\x1a\x14.calc.SubstractReply\"\x00\x12\x38\n\x08Multiply\x12\x15.calc.MultiplyRequest\x1a\x13.calc.MultiplyReply\"\x00\x12\x32\n\x06\x44ivide\x12\x13.calc.DivideRequest\x1a\x11.calc.DivideReply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_ADDREQUEST = _descriptor.Descriptor(
  name='AddRequest',
  full_name='calc.AddRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n1', full_name='calc.AddRequest.n1', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='n2', full_name='calc.AddRequest.n2', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=20,
  serialized_end=56,
)


_ADDREPLY = _descriptor.Descriptor(
  name='AddReply',
  full_name='calc.AddReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n1', full_name='calc.AddReply.n1', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=58,
  serialized_end=80,
)


_SUBSTRACTREQUEST = _descriptor.Descriptor(
  name='SubstractRequest',
  full_name='calc.SubstractRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n1', full_name='calc.SubstractRequest.n1', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='n2', full_name='calc.SubstractRequest.n2', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=82,
  serialized_end=124,
)


_SUBSTRACTREPLY = _descriptor.Descriptor(
  name='SubstractReply',
  full_name='calc.SubstractReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n1', full_name='calc.SubstractReply.n1', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=126,
  serialized_end=154,
)


_MULTIPLYREQUEST = _descriptor.Descriptor(
  name='MultiplyRequest',
  full_name='calc.MultiplyRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n1', full_name='calc.MultiplyRequest.n1', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='n2', full_name='calc.MultiplyRequest.n2', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=156,
  serialized_end=197,
)


_MULTIPLYREPLY = _descriptor.Descriptor(
  name='MultiplyReply',
  full_name='calc.MultiplyReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n1', full_name='calc.MultiplyReply.n1', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=199,
  serialized_end=226,
)


_DIVIDEREQUEST = _descriptor.Descriptor(
  name='DivideRequest',
  full_name='calc.DivideRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n1', full_name='calc.DivideRequest.n1', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='n2', full_name='calc.DivideRequest.n2', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=228,
  serialized_end=267,
)


_DIVIDEREPLY = _descriptor.Descriptor(
  name='DivideReply',
  full_name='calc.DivideReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='f1', full_name='calc.DivideReply.f1', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=269,
  serialized_end=294,
)

DESCRIPTOR.message_types_by_name['AddRequest'] = _ADDREQUEST
DESCRIPTOR.message_types_by_name['AddReply'] = _ADDREPLY
DESCRIPTOR.message_types_by_name['SubstractRequest'] = _SUBSTRACTREQUEST
DESCRIPTOR.message_types_by_name['SubstractReply'] = _SUBSTRACTREPLY
DESCRIPTOR.message_types_by_name['MultiplyRequest'] = _MULTIPLYREQUEST
DESCRIPTOR.message_types_by_name['MultiplyReply'] = _MULTIPLYREPLY
DESCRIPTOR.message_types_by_name['DivideRequest'] = _DIVIDEREQUEST
DESCRIPTOR.message_types_by_name['DivideReply'] = _DIVIDEREPLY

AddRequest = _reflection.GeneratedProtocolMessageType('AddRequest', (_message.Message,), dict(
  DESCRIPTOR = _ADDREQUEST,
  __module__ = 'Calc_pb2'
  # @@protoc_insertion_point(class_scope:calc.AddRequest)
  ))
_sym_db.RegisterMessage(AddRequest)

AddReply = _reflection.GeneratedProtocolMessageType('AddReply', (_message.Message,), dict(
  DESCRIPTOR = _ADDREPLY,
  __module__ = 'Calc_pb2'
  # @@protoc_insertion_point(class_scope:calc.AddReply)
  ))
_sym_db.RegisterMessage(AddReply)

SubstractRequest = _reflection.GeneratedProtocolMessageType('SubstractRequest', (_message.Message,), dict(
  DESCRIPTOR = _SUBSTRACTREQUEST,
  __module__ = 'Calc_pb2'
  # @@protoc_insertion_point(class_scope:calc.SubstractRequest)
  ))
_sym_db.RegisterMessage(SubstractRequest)

SubstractReply = _reflection.GeneratedProtocolMessageType('SubstractReply', (_message.Message,), dict(
  DESCRIPTOR = _SUBSTRACTREPLY,
  __module__ = 'Calc_pb2'
  # @@protoc_insertion_point(class_scope:calc.SubstractReply)
  ))
_sym_db.RegisterMessage(SubstractReply)

MultiplyRequest = _reflection.GeneratedProtocolMessageType('MultiplyRequest', (_message.Message,), dict(
  DESCRIPTOR = _MULTIPLYREQUEST,
  __module__ = 'Calc_pb2'
  # @@protoc_insertion_point(class_scope:calc.MultiplyRequest)
  ))
_sym_db.RegisterMessage(MultiplyRequest)

MultiplyReply = _reflection.GeneratedProtocolMessageType('MultiplyReply', (_message.Message,), dict(
  DESCRIPTOR = _MULTIPLYREPLY,
  __module__ = 'Calc_pb2'
  # @@protoc_insertion_point(class_scope:calc.MultiplyReply)
  ))
_sym_db.RegisterMessage(MultiplyReply)

DivideRequest = _reflection.GeneratedProtocolMessageType('DivideRequest', (_message.Message,), dict(
  DESCRIPTOR = _DIVIDEREQUEST,
  __module__ = 'Calc_pb2'
  # @@protoc_insertion_point(class_scope:calc.DivideRequest)
  ))
_sym_db.RegisterMessage(DivideRequest)

DivideReply = _reflection.GeneratedProtocolMessageType('DivideReply', (_message.Message,), dict(
  DESCRIPTOR = _DIVIDEREPLY,
  __module__ = 'Calc_pb2'
  # @@protoc_insertion_point(class_scope:calc.DivideReply)
  ))
_sym_db.RegisterMessage(DivideReply)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class CalculatorStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Add = channel.unary_unary(
        '/calc.Calculator/Add',
        request_serializer=AddRequest.SerializeToString,
        response_deserializer=AddReply.FromString,
        )
    self.Substract = channel.unary_unary(
        '/calc.Calculator/Substract',
        request_serializer=SubstractRequest.SerializeToString,
        response_deserializer=SubstractReply.FromString,
        )
    self.Multiply = channel.unary_unary(
        '/calc.Calculator/Multiply',
        request_serializer=MultiplyRequest.SerializeToString,
        response_deserializer=MultiplyReply.FromString,
        )
    self.Divide = channel.unary_unary(
        '/calc.Calculator/Divide',
        request_serializer=DivideRequest.SerializeToString,
        response_deserializer=DivideReply.FromString,
        )


class CalculatorServicer(object):

  def Add(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Substract(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Multiply(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Divide(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CalculatorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Add': grpc.unary_unary_rpc_method_handler(
          servicer.Add,
          request_deserializer=AddRequest.FromString,
          response_serializer=AddReply.SerializeToString,
      ),
      'Substract': grpc.unary_unary_rpc_method_handler(
          servicer.Substract,
          request_deserializer=SubstractRequest.FromString,
          response_serializer=SubstractReply.SerializeToString,
      ),
      'Multiply': grpc.unary_unary_rpc_method_handler(
          servicer.Multiply,
          request_deserializer=MultiplyRequest.FromString,
          response_serializer=MultiplyReply.SerializeToString,
      ),
      'Divide': grpc.unary_unary_rpc_method_handler(
          servicer.Divide,
          request_deserializer=DivideRequest.FromString,
          response_serializer=DivideReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'calc.Calculator', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaCalculatorServicer(object):
  def Add(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def Substract(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def Multiply(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def Divide(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaCalculatorStub(object):
  def Add(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Add.future = None
  def Substract(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Substract.future = None
  def Multiply(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Multiply.future = None
  def Divide(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Divide.future = None


def beta_create_Calculator_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('calc.Calculator', 'Add'): AddRequest.FromString,
    ('calc.Calculator', 'Divide'): DivideRequest.FromString,
    ('calc.Calculator', 'Multiply'): MultiplyRequest.FromString,
    ('calc.Calculator', 'Substract'): SubstractRequest.FromString,
  }
  response_serializers = {
    ('calc.Calculator', 'Add'): AddReply.SerializeToString,
    ('calc.Calculator', 'Divide'): DivideReply.SerializeToString,
    ('calc.Calculator', 'Multiply'): MultiplyReply.SerializeToString,
    ('calc.Calculator', 'Substract'): SubstractReply.SerializeToString,
  }
  method_implementations = {
    ('calc.Calculator', 'Add'): face_utilities.unary_unary_inline(servicer.Add),
    ('calc.Calculator', 'Divide'): face_utilities.unary_unary_inline(servicer.Divide),
    ('calc.Calculator', 'Multiply'): face_utilities.unary_unary_inline(servicer.Multiply),
    ('calc.Calculator', 'Substract'): face_utilities.unary_unary_inline(servicer.Substract),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Calculator_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('calc.Calculator', 'Add'): AddRequest.SerializeToString,
    ('calc.Calculator', 'Divide'): DivideRequest.SerializeToString,
    ('calc.Calculator', 'Multiply'): MultiplyRequest.SerializeToString,
    ('calc.Calculator', 'Substract'): SubstractRequest.SerializeToString,
  }
  response_deserializers = {
    ('calc.Calculator', 'Add'): AddReply.FromString,
    ('calc.Calculator', 'Divide'): DivideReply.FromString,
    ('calc.Calculator', 'Multiply'): MultiplyReply.FromString,
    ('calc.Calculator', 'Substract'): SubstractReply.FromString,
  }
  cardinalities = {
    'Add': cardinality.Cardinality.UNARY_UNARY,
    'Divide': cardinality.Cardinality.UNARY_UNARY,
    'Multiply': cardinality.Cardinality.UNARY_UNARY,
    'Substract': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'calc.Calculator', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
